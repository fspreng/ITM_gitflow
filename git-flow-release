#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

init() {
  require_git_repo
  require_gitflow_initialized
  gitflow_load_settings
  VERSION_PREFIX=$(eval "echo `git config --get gitflow.prefix.versiontag`")
  PREFIX=$(git config --get gitflow.prefix.release)
  REMOTE_PREFIX=$ORIGIN/$PREFIX
}

usage() {
	echo "usage: $GITFLOW_COMMAND release [list] [-v]"
#	echo "       $GITFLOW_COMMAND release start [-F] <major/minor> [<base>]"
	echo "       $GITFLOW_COMMAND release start [-F] <major/minor>"
	echo "       $GITFLOW_COMMAND release finish [-FsumpkSo] <name>"
	echo "       $GITFLOW_COMMAND feature delete [-l] <name>"
	echo "       $GITFLOW_COMMAND release publish <name>"
	echo "       $GITFLOW_COMMAND release track <name>"
}

cmd_default() {
	cmd_list "$@"
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

	local release_branches
	local current_branch
	local short_names
	release_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
	local remote_release_branches
	remote_release_branches=$(echo "$(git_remote_branches)" | grep "^$REMOTE_PREFIX")
	if [ -z "$release_branches" ] && [ -z "$remote_release_branches" ]; then
		warn "No release branches exist."
                warn ""
                warn "You can start a new release branch:"
                warn ""
                warn "    $GITFLOW_COMMAND release start <major/minor> [<base>]"
                warn ""
		exit 0
	fi
	current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
	short_names=$(echo "$release_branches" | sed "s ^$PREFIX  g")

	# determine column width first
	local width=0
	local branch
	for branch in $short_names; do
		local len=${#branch}
		width=$(max $width $len)
	done
	for branch in $remote_release_branches; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	if [ "$release_branches" ]; then
		printf "Local release branches:"
		echo
		local branch
		for branch in $short_names; do
			local fullname=$PREFIX$branch
			local base=$(git merge-base "$fullname" "$DEVELOP_BRANCH")
			local develop_sha=$(git rev-parse "$DEVELOP_BRANCH")
			local branch_sha=$(git rev-parse "$fullname")
			if [ "$fullname" = "$current_branch" ]; then
				printf "* "
			else
				printf "  "
			fi
			if flag verbose; then
				printf "%-${width}s" "$branch"
				if [ "$branch_sha" = "$develop_sha" ]; then
					printf "(no commits yet)"
				else
					local nicename=$(git rev-parse --short "$base")
					printf "(based on $nicename)"
				fi
			else
				printf "%s" "$PREFIX$branch"
			fi
			echo
		done
	fi
	if [ "$remote_release_branches" ]; then
		printf "Remote release branches:"
		echo
		for branch in $remote_release_branches; do
			printf "  "
			printf "%s" "remotes/$branch"
			echo
		done
	fi
}

cmd_help() {
	usage
	exit 0
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	VERSION=$1
	# check whether the user has already added the version tag prefix or not
	if { echo "$VERSION" | grep -q "^$VERSION_PREFIX"; } then
		local len=${#VERSION_PREFIX}
		VERSION=${VERSION:$len}
	fi
	BRANCH=$PREFIX$VERSION_PREFIX$VERSION
}

require_version_arg() {
	if [ "$VERSION" = "" ]; then
		warn "Missing argument <version>"
		usage
		exit 1
	fi
}

require_major_minor_arg() {
	if [ "$VERSION" != "major" ] && [ "$VERSION" != "minor" ]; then
		warn "Missing argument <major/minor>"
		usage
		exit 1
	else
		local majortag=0
		local minortag=0
		if [ "$VERSION" == "major" ]; then
			local tag
			for tag in $(git_do for-each-ref refs/tags/ --format='%(refname)'); do
				if { echo "$tag" | grep -q "$VERSION_PREFIX"; } then
					local len=10+${#VERSION_PREFIX}
					local shorttag
					shorttag=${tag:len}
					local nextdot
					nextdot=$(expr index "$shorttag" .)
					((nextdot-=1))
					shorttag=${shorttag:0:nextdot}
					if [[ "$shorttag" -gt "$majortag" ]]; then
						majortag=$shorttag
					fi
				fi
			done
			((majortag+=1))
			minortag=0
		else
			local tag
			for tag in $(git_do for-each-ref refs/tags/ --format='%(refname)'); do
				if { echo "$tag" | grep -q "$VERSION_PREFIX"; } then
					local len=10+${#VERSION_PREFIX}
					local shorttag
					shorttag=${tag:len}
					local nextdot
					nextdot=$(expr index "$shorttag" .)
					((nextdot-=1))
					local fronttag=${shorttag:0:nextdot}
					if [ "$fronttag" -ge "$majortag" ]; then
						if [ "$fronttag" -gt "$majortag" ]; then
							minortag=0
						fi
						majortag=$fronttag
						shorttag=${shorttag: ((nextdot+=1))}
						nextdot=$(expr index "$shorttag" .)
						((nextdot-=1))
						shorttag=${shorttag:0:nextdot}
						if [[ "$shorttag" -gt "$minortag" ]]; then
							minortag=$shorttag
						fi
					fi
				fi
			done
			((minortag+=1))
		fi
		VERSION=$majortag.$minortag.0
		BRANCH=$PREFIX$VERSION_PREFIX$VERSION
	fi
}

require_base_is_on_develop() {
	if ! git_do branch --no-color --contains "$BASE" 2>/dev/null \
			| sed 's/[* ] //g' \
	  		| grep -q "^$DEVELOP_BRANCH\$"; then
		die "fatal: Given base '$BASE' is not a valid commit on '$DEVELOP_BRANCH'."
	fi
}

require_no_existing_release_branches() {
	local release_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
	local first_branch=$(echo ${release_branches} | head -n1)
	first_branch=${first_branch#$PREFIX}
	[ -z "$release_branches" ] || \
		die "There is an existing release branch ($first_branch). Finish that one first."
}

cmd_start() {
	DEFINE_boolean fetch false "fetch from $ORIGIN before performing finish" F
	parse_args "$@"
#	BASE=${2:-$DEVELOP_BRANCH}
#	require_version_arg
	require_major_minor_arg
#	require_base_is_on_develop
	require_no_existing_release_branches

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$BRANCH"
	git_do remote update >/dev/null 2>&1 || \
	  die "Could not update remote branches from $ORIGIN."
	require_branch_absent "$ORIGIN/$BRANCH"
	require_tag_absent "$VERSION_PREFIX$VERSION"
	if flag fetch; then
		git_do fetch -q "$ORIGIN" "$DEVELOP_BRANCH" >/dev/null 2>&1
	fi
	# if the origin branch counterpart exists, assert that the local branch
	# isn't behind it (to avoid unnecessary rebasing)
	if has "$ORIGIN/$DEVELOP_BRANCH" $(git_remote_branches); then
		require_branches_equal "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	fi

	# create the local branch and the corresponding remote branch
	if ! git_do checkout -b "$BRANCH" "$DEVELOP_BRANCH" >/dev/null 2>&1; then
		die "Could not create hotfix branch '$BRANCH'"
	else
		git_do push origin "$BRANCH" >/dev/null 2>&1
	fi

	echo
	echo "Summary of actions:"
	echo "- A new local branch '$BRANCH' was created, based on '$DEVELOP_BRANCH'"
	echo "- A new remote branch '$BRANCH' was created, based on the local one"
	echo "- You are now on branch '$BRANCH'"
	echo
#	echo "Follow-up actions:"
#	echo "- Bump the version number now!"
#	echo "- Start committing last-minute fixes in preparing your release"
#	echo "- When done, run:"
	echo "Now, start committing on the release version. When done, use:"
	echo
	echo "     $GITFLOW_COMMAND release finish $VERSION_PREFIX$VERSION"
	echo
}

cmd_finish() {
	DEFINE_boolean fetch true "fetch from $ORIGIN before performing finish" F
	DEFINE_boolean sign false "sign the release tag cryptographically" s
	DEFINE_string signingkey "" "use the given GPG-key for the digital signature (implies -s)" u
	DEFINE_string message "" "use the given tag message" m
	DEFINE_string messagefile "" "use the contents of the given file as a tag message" f
	DEFINE_boolean push true "push to $ORIGIN after performing finish" p
	DEFINE_boolean keep false "keep branch after performing finish" k
	DEFINE_boolean notag false "don't tag this release" n
	DEFINE_boolean squash false "squash release during merge" S
	DEFINE_boolean onlymaster false "merge the current release branch only into the master branch" o
	parse_args "$@"
	require_version_arg

	# handle flags that imply other flags
	if [ "$FLAGS_signingkey" != "" ]; then
		FLAGS_sign=$FLAGS_TRUE
	fi

	# sanity checks
	require_branch "$BRANCH"
	git_do fetch -q "$ORIGIN" "$BRANCH" >/dev/null 2>&1 || \
	  die "Could not fetch $BRANCH from $ORIGIN."
	require_branch "$ORIGIN/$BRANCH"
	require_clean_working_tree
	if has "$ORIGIN/$BRANCH" $(git_remote_branches); then
		if flag fetch; then
			git_do fetch -q "$ORIGIN" "$MASTER_BRANCH" >/dev/null 2>&1 || \
			  die "Could not fetch $MASTER_BRANCH from $ORIGIN."
			git_do fetch -q "$ORIGIN" "$BRANCH" >/dev/null 2>&1 || \
			  die "Could not fetch $BRANCH from $ORIGIN."
		fi
	fi

	if has "$ORIGIN/$MASTER_BRANCH" $(git_remote_branches); then
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	fi
	if has "$ORIGIN/BRANCH" $(git_remote_branches); then
		require_branches_equal "$BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
	fi

	if noflag notag; then
		# try to tag the release
		# in case a previous attempt to finish this release branch has failed,
		# but the tag was set successful, we skip it now
		local tagname=$VERSION_PREFIX$VERSION
		if ! git_tag_exists "$tagname"; then
			local opts="-a"
			flag sign && opts="$opts -s"
			[ "$FLAGS_signingkey" != "" ] && opts="$opts -u '$FLAGS_signingkey'"
			[ "$FLAGS_message" != "" ] && opts="$opts -m '$FLAGS_message'"
			[ "$FLAGS_messagefile" != "" ] && opts="$opts -F '$FLAGS_messagefile'"
			eval git_do tag $opts "$tagname" "$BRANCH" >/dev/null 2>&1 || \
			  die "Tagging failed. Please run finish again to retry."
		fi
	fi

	if ! flag onlymaster; then
		# try to merge into develop
		# in case a previous attempt to finish this release branch has failed,
		# but the merge into develop was successful, we skip it now
		git_do fetch -q "$ORIGIN" "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
		  die "Could not fetch $DEVELOP_BRANCH from $ORIGIN."
		if ! git_is_branch_merged_into "$BRANCH" "$ORIGIN/$DEVELOP_BRANCH"; then
			git_do checkout "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
			  die "Could not check out $DEVELOP_BRANCH."

			# TODO: Actually, accounting for 'git describe' pays, so we should
			# ideally git merge --no-ff $tagname here, instead!
			if noflag squash; then
				git_do merge --no-ff "$BRANCH" >/dev/null 2>&1 || \
				  die "There were merge conflicts."
				  # TODO: What do we do now?
			else
				git_do merge --squash "$BRANCH" >/dev/null 2>&1 || \
				  die "There were merge conflicts."
				  # TODO: What do we do now?
				git_do commit >/dev/null 2>&1 
			fi
			git_do push "$ORIGIN" "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
			  die "Could not push to $DEVELOP_BRANCH from $ORIGIN."
			git_do checkout "$BRANCH" >/dev/null 2>&1 || \
			  die "Could not check out $BRANCH."
		fi
	fi

	# try to merge into master
	# in case a previous attempt to finish this release branch has failed,
	# but the merge into master was successful, we skip it now
	if ! git_is_branch_merged_into "$BRANCH" "$MASTER_BRANCH"; then
		git_do checkout "$MASTER_BRANCH" >/dev/null 2>&1  || \
		  die "Could not check out $MASTER_BRANCH."
		if noflag squash; then
			git_do merge --no-ff "$BRANCH" >/dev/null 2>&1  || \
				die "There were merge conflicts."
				# TODO: What do we do now?
		else
			git_do merge --squash "$BRANCH" >/dev/null 2>&1 || \
				die "There were merge conflicts."
			git_do commit >/dev/null 2>&1 
		fi
	fi

	if flag push; then
		git_do push "$ORIGIN" "$MASTER_BRANCH" >/dev/null 2>&1 || \
			die "Could not push to $MASTER_BRANCH from $ORIGIN."
		if noflag notag; then
			git_do push --tags "$ORIGIN" >/dev/null 2>&1 || \
			  die "Could not push tags to $ORIGIN."
		fi
		git_do push "$ORIGIN" :"$BRANCH" >/dev/null 2>&1 || \
			die "Could not delete the remote $BRANCH in $ORIGIN."
	fi

	# delete branch
	if noflag keep; then
		git_do checkout "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
		  die "Could not check out $BRANCH."
		git_do branch -d "$BRANCH" >/dev/null 2>&1
		git_do push "$ORIGIN" ":refs/heads/$BRANCH" >/dev/null 2>&1
	fi

	echo
	echo "Summary of actions:"
	echo "- Latest objects have been fetched from '$ORIGIN'"
	echo "- Release branch has been merged into '$MASTER_BRANCH'"
#	if noflag notag; then
		echo "- The release was tagged '$tagname'"
#	fi
	if ! flag onlymaster; then
		echo "- Release branch has been back-merged into '$DEVELOP_BRANCH'"
	fi
	if flag keep; then
		echo "- Release branch '$BRANCH' (local and remote) is still available"
	else
		echo "- Release branch '$BRANCH' (local and remote) has been deleted"
	fi
	if flag push; then
		if ! flag onlymaster; then
			echo "- '$DEVELOP_BRANCH', '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'"
		else
			echo "- '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'"
		fi
	fi
	if noflag keep; then
		echo "- You are now on branch '$DEVELOP_BRANCH'"
	fi
	echo
}

cmd_publish() {
	parse_args "$@"
	require_version_arg

	# sanity checks
	require_clean_working_tree
	require_branch "$BRANCH"
	git_do fetch -q "$ORIGIN" >/dev/null 2>&1
	require_branch_absent "$ORIGIN/$BRANCH"

	# create remote branch
	git_do push "$ORIGIN" "$BRANCH:refs/heads/$BRANCH" >/dev/null 2>&1
	git_do fetch -q "$ORIGIN" >/dev/null 2>&1

	# configure remote tracking
	git_do config "branch.$BRANCH.remote" "$ORIGIN" >/dev/null 2>&1
	git_do config "branch.$BRANCH.merge" "refs/heads/$BRANCH" >/dev/null 2>&1
	git_do checkout "$BRANCH" >/dev/null 2>&1

	echo
	echo "Summary of actions:"
	echo "- A new remote branch '$BRANCH' was created"
	echo "- The local branch '$BRANCH' was configured to track the remote branch"
	echo "- The old remote branch '$BRANCH' has to be deleted manually"
	echo "- You are now on branch '$BRANCH'"
	echo
}

cmd_track() {
	parse_args "$@"
	require_version_arg

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$BRANCH"
	git_do fetch -q "$ORIGIN" >/dev/null 2>&1
	require_branch "$ORIGIN/$BRANCH"

	# create tracking branch
	git_do checkout -b "$BRANCH" "$ORIGIN/$BRANCH" >/dev/null 2>&1

	echo
	echo "Summary of actions:"
	echo "- A new remote tracking branch '$BRANCH' was created"
	echo "- You are now on branch '$BRANCH'"
	echo
}

cmd_delete() {
	DEFINE_boolean local false "only delete the local branch" l
	parse_args "$@"

	# sanity checks
#	require_branch "$BRANCH"

	# change to branch develop
	git_do checkout "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
	  die "Could not check out $DEVELOP_BRANCH."

	# delete local branch
	git_do branch -d "$BRANCH" >/dev/null 2>&1

	if ! flag local; then
		# delete remote branch
		git_do push "$ORIGIN" ":refs/heads/$BRANCH" >/dev/null 2>&1
	fi

	echo
	echo "Summary of actions:"
	echo "- The local branch '$BRANCH' has been deleted"
	if ! flag local; then
		echo "- The remote branch '$ORIGIN/$BRANCH' has been deleted"
	fi
	echo "- You are now on branch '$DEVELOP_BRANCH'"
	echo
}
