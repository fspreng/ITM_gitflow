#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

init() {
  require_git_repo
  require_gitflow_initialized
  gitflow_load_settings
  VERSION_PREFIX=$(eval "echo `git config --get gitflow.prefix.versiontag`")
  PREFIX=$(git config --get gitflow.prefix.hotfix)
  REMOTE_PREFIX=$ORIGIN/$PREFIX
}

usage() {
	echo "usage: $GITFLOW_COMMAND hotfix [list] [-v]"
#	echo "       $GITFLOW_COMMAND hotfix start [-F] <version> [<base>]"
	echo "       $GITFLOW_COMMAND hotfix start [-F] <version>"
	echo "       $GITFLOW_COMMAND hotfix finish [-Fsumfpknod] <name>"
	echo "       $GITFLOW_COMMAND hotfix delete [-l] <name>"
	echo "       $GITFLOW_COMMAND hotfix publish <name>"
	echo "       $GITFLOW_COMMAND hotfix track <name>"
}

cmd_default() {
	cmd_list "$@"
}

cmd_list() {
	DEFINE_boolean verbose false 'verbose (more) output' v
	parse_args "$@"

	local hotfix_branches
	local current_branch
	local short_names
	hotfix_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
	local remote_hotfix_branches
	remote_hotfix_branches=$(echo "$(git_remote_branches)" | grep "^$REMOTE_PREFIX")
	if [ -z "$hotfix_branches" ] && [ -z "$remote_hotfix_branches" ]; then
		warn "No hotfix branches exist."
                warn ""
                warn "You can start a new hotfix branch:"
                warn ""
                warn "    $GITFLOW_COMMAND hotfix start <version> [<base>]"
                warn ""
		exit 0
	fi
	current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
	short_names=$(echo "$hotfix_branches" | sed "s ^$PREFIX  g")

	# determine column width first
	local width=0
	local branch
	for branch in $short_names; do
		local len=${#branch}
		width=$(max $width $len)
	done
	for branch in $remote_hotfix_branches; do
		local len=${#branch}
		width=$(max $width $len)
	done
	width=$(($width+3))

	if [ "$hotfix_branches" ]; then
		printf "Local hotfix branches:"
		echo
		local branch
		for branch in $short_names; do
			local fullname=$PREFIX$branch
			local base=$(git merge-base "$fullname" "$MASTER_BRANCH")
			local master_sha=$(git rev-parse "$MASTER_BRANCH")
			local branch_sha=$(git rev-parse "$fullname")
			if [ "$fullname" = "$current_branch" ]; then
				printf "* "
			else
				printf "  "
			fi
			if flag verbose; then
				printf "%-${width}s" "$branch"
				if [ "$branch_sha" = "$master_sha" ]; then
					printf "(no commits yet)"
				else
					local tagname=$(git name-rev --tags --no-undefined --name-only "$base")
					local nicename
					if [ "$tagname" != "" ]; then
						nicename=$tagname
					else
						nicename=$(git rev-parse --short "$base")
					fi
					printf "(based on $nicename)"
				fi
			else
				printf "%s" "$PREFIX$branch"
			fi
			echo
		done
	fi
	if [ "$remote_hotfix_branches" ]; then
		printf "Remote hotfix branches:"
		echo
		for branch in $remote_hotfix_branches; do
			printf "  "
			printf "%s" "remotes/$branch"
			echo
		done
	fi
}

cmd_help() {
	usage
	exit 0
}

parse_args() {
	# parse options
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	VERSION=$1
	# check whether the user has already added the version tag prefix or not
	if { echo "$VERSION" | grep -q "^$VERSION_PREFIX"; } then
		local len=${#VERSION_PREFIX}
		VERSION=${VERSION:$len}
	fi

	# check whether the user has provided a version tag with hotfix tag or not
	local number_dots
	# if there is only a dot at the end of the input string, kill it
	if { echo "$VERSION" | grep -q "[.]$"; } then
		local len=${#VERSION}-1
		VERSION=${VERSION:0:len}
	fi
	# if there is no hotfix tag provided by the user, get the latest one from the server
	number_dots="${VERSION//[^.]}"
	if [ "${#number_dots}" = 1 ]; then
		local last=0
		local tag
		for tag in $(git_do for-each-ref refs/tags/ --format='%(refname)'); do
			if { echo "$tag" | grep -q "$VERSION"; } then
				local len=8+${#VERSION}+${#VERSION}+1
				local shorttag
				shorttag=${tag:len}
				local nextdot
				nextdot=$(expr index "$shorttag" .)
				if [[ "$nextdot" -gt 0 ]]; then
					((nextdot-=1))
					shorttag=${shorttag:0:nextdot}
				fi
				if [[ "$shorttag" -gt "$last" ]]; then
					last=$shorttag
				fi
			fi
		done
		local newlast
		((newlast=last+1))
		NEW_BRANCH=$PREFIX$VERSION_PREFIX$VERSION.$newlast
		NEW_VERSION=$VERSION.$newlast
		VERSION=$VERSION.$last
	elif [ "${#number_dots}" = 2 ]; then
		local nextdot
		nextdot=$(expr index "$VERSION" .)
		local prefix
		prefix=${VERSION:0: nextdot+1}
		local suffix
		suffix=${VERSION:nextdot}
		nextdot=$(expr index "$suffix" .)
		local last
		last=${suffix:nextdot}
		((newlast=last+1))
		NEW_BRANCH=$PREFIX$VERSION_PREFIX$prefix.$newlast
		NEW_VERSION=$prefix.$newlast
	elif [[ "${#number_dots}" -gt 2 ]]; then
		die "Subhotfix branches are not supported."
	fi
	BRANCH=$PREFIX$VERSION_PREFIX$VERSION
}

require_version_arg() {
	if [ "$VERSION" = "" ]; then
		warn "Missing argument <version>"
		usage
		exit 1
	fi
}

require_base_is_on_master() {
	if ! git_do branch --no-color --contains "$BASE" 2>/dev/null \
			| sed 's/[* ] //g' \
	  		| grep -q "^$MASTER_BRANCH\$"; then
		die "fatal: Given base '$BASE' is not a valid commit on '$MASTER_BRANCH'."
	fi
}

require_no_existing_hotfix_branches() {
	local hotfix_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
	local first_branch=$(echo ${hotfix_branches} | head -n1)
	first_branch=${first_branch#$PREFIX}
	[ -z "$hotfix_branches" ] || \
		die "There is an existing hotfix branch ($first_branch). Finish that one first."
}

cmd_start() {
	DEFINE_boolean fetch false "fetch from $ORIGIN before performing finish" F
	parse_args "$@"
#	BASE=${2:-$MASTER_BRANCH}
	require_version_arg
#	require_base_is_on_master
	require_no_existing_hotfix_branches

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$NEW_BRANCH"
	git_do remote update >/dev/null 2>&1 || \
	  die "Could not update remote branches from $ORIGIN."
	if has $ORIGIN/$NEW_BRANCH $(git_all_branches); then
		die "There is an existing hotfix branch ($ORIGIN/$NEW_BRANCH). Finish that one first."
	fi
#	require_branch_absent "$ORIGIN/$NEW_BRANCH"
	require_tag_existing "$VERSION_PREFIX$VERSION"
	require_tag_absent "$VERSION_PREFIX$NEW_VERSION"
	if flag fetch; then
		git_do fetch -q "$ORIGIN" "$MASTER_BRANCH" >/dev/null 2>&1
	fi
	# if the origin branch counterpart exists, assert that the local branch
	# isn't behind it (to avoid unnecessary rebasing)
	if has "$ORIGIN/$MASTER_BRANCH" $(git_remote_branches); then
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	fi

	# create the local branch and the corresponding remote branch
	if ! git_do checkout -b "$NEW_BRANCH" "$VERSION_PREFIX$VERSION" >/dev/null 2>&1; then
		die "Could not create hotfix branch '$NEW_BRANCH'"
	else
		git_do push origin "$NEW_BRANCH" >/dev/null 2>&1
	fi

	echo
	echo "Summary of actions:"
	echo "- A new local branch '$NEW_BRANCH' was created, based on '$VERSION_PREFIX$VERSION'"
	echo "- A new remote branch '$NEW_BRANCH' was created, based on the local one"
	echo "- You are now on branch '$NEW_BRANCH'"
	echo
#	echo "Follow-up actions:"
#	echo "- Bump the version number now!"
#	echo "- Start committing your hot fixes"
#	echo "- When done, run:"
	echo "Now, start committing your hotfixes. When done, use:"
	echo
	echo "     $GITFLOW_COMMAND hotfix finish $VERSION_PREFIX$NEW_VERSION"
	echo
}

cmd_publish() {
	parse_args "$@"
	require_version_arg

	# sanity checks
	require_clean_working_tree
	require_branch "$BRANCH"
	git_do fetch -q "$ORIGIN" >/dev/null 2>&1
	require_branch_absent "$ORIGIN/$BRANCH"

	# create remote branch
	git_do push "$ORIGIN" "$BRANCH:refs/heads/$BRANCH" >/dev/null 2>&1
	git_do fetch -q "$ORIGIN" >/dev/null 2>&1

	# configure remote tracking
	git_do config "branch.$BRANCH.remote" "$ORIGIN" >/dev/null 2>&1
	git_do config "branch.$BRANCH.merge" "refs/heads/$BRANCH" >/dev/null 2>&1
	git_do checkout "$BRANCH" >/dev/null 2>&1

	echo
	echo "Summary of actions:"
	echo "- A new remote branch '$BRANCH' was created"
	echo "- The local branch '$BRANCH' was configured to track the remote branch"
	echo "- The old remote branch '$BRANCH' has to be deleted manually"
	echo "- You are now on branch '$BRANCH'"
	echo
}

cmd_track() {
	parse_args "$@"
	require_version_arg

	# sanity checks
	require_clean_working_tree
	require_branch_absent "$BRANCH"
	git_do fetch -q "$ORIGIN" >/dev/null 2>&1
	require_branch "$ORIGIN/$BRANCH"

	# create tracking branch
	git_do checkout -b "$BRANCH" "$ORIGIN/$BRANCH" >/dev/null 2>&1

	echo
	echo "Summary of actions:"
	echo "- A new remote tracking branch '$BRANCH' was created"
	echo "- You are now on branch '$BRANCH'"
	echo
}

cmd_finish() {
	DEFINE_boolean fetch true "fetch from remote branches before performing finish" F
	DEFINE_boolean sign false "sign the release tag cryptographically" s
	DEFINE_string signingkey "" "use the given GPG-key for the digital signature (implies -s)" u
	DEFINE_string message "" "use the given tag message" m
	DEFINE_string messagefile "" "use the contents of the given file as tag message" f
	DEFINE_boolean push true "push to $ORIGIN after performing finish" p
	DEFINE_boolean keep false "keep branch after performing finish" k
	DEFINE_boolean notag false "don't tag this release" n
	DEFINE_boolean onlymaster false "merge the current hotfix branch only into the master branch" o
	DEFINE_boolean onlydevelop false "merge the current hotfix branch only into the develop branch and not into an existing release branch (requires flag -o is absent)" d
	parse_args "$@"
	require_version_arg

	# handle flags that imply other flags
	if [ "$FLAGS_signingkey" != "" ]; then
		FLAGS_sign=$FLAGS_TRUE
	fi

	# sanity checks
	require_branch "$BRANCH"
	git_do fetch -q "$ORIGIN" "$BRANCH" >/dev/null 2>&1 || \
	  die "Could not fetch $BRANCH from $ORIGIN."
	require_branch "$ORIGIN/$BRANCH"
	require_clean_working_tree
	if has "$ORIGIN/$BRANCH" $(git_remote_branches); then
		if flag fetch; then
			git_do fetch -q "$ORIGIN" "$MASTER_BRANCH" || \
			  die "Could not fetch $MASTER_BRANCH from $ORIGIN."
			git_do fetch -q "$ORIGIN" "$BRANCH" || \
			  die "Could not fetch $BRANCH from $ORIGIN."
		fi
	fi

	if has "$ORIGIN/$MASTER_BRANCH" $(git_remote_branches); then
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
	fi
	if has "$ORIGIN/$BRANCH" $(git_remote_branches); then
		require_branches_equal "$BRANCH" "$ORIGIN/$BRANCH"
	fi

	if noflag notag; then
		# try to tag the hotfix
		# in case a previous attempt to finish this hotfix branch has failed,
		# but the tag was set successful, we skip it now
		local tagname=$VERSION_PREFIX$VERSION
		if ! git_tag_exists "$tagname"; then
			local opts="-a"
			flag sign && opts="$opts -s"
			[ "$FLAGS_signingkey" != "" ] && opts="$opts -u '$FLAGS_signingkey'"
			[ "$FLAGS_message" != "" ] && opts="$opts -m '$FLAGS_message'"
			[ "$FLAGS_messagefile" != "" ] && opts="$opts -F '$FLAGS_messagefile'"
			eval git_do tag $opts "$tagname" "$BRANCH" || \
			die "Tagging failed. Please run finish again to retry."
		fi
	fi

	local norelease=false
	if ! flag onlymaster; then
#		if flag release; then
		if ! flag onlydevelop; then
			local remote_tag="$ORIGIN/$(git config --get gitflow.prefix.release)"
			if ! has_like $remote_tag $(git_remote_branches); then
				echo
				warn "A release branch does not exist. Merging only into the develop branch."
				norelease=true
#				release=false
			else
				local remote_branches
				remote_branches="$(git_remote_branches)"
				local remote_branch="not_found"
				local find_branch
				for find_branch in $remote_branches; do
					if { echo "$find_branch" | grep -q "^$remote_tag"; } then
					remote_branch="$find_branch"
					fi
				done
				local local_branches
				local_branches="$(git_local_branches)"
				local local_branch="not_found"
				local local_tag="$(git config --get gitflow.prefix.release)"
				for find_branch in $local_branches; do
					if { echo "$find_branch" | grep -q "^$local_tag"; } then
					local_branch="$find_branch"
					fi
				done
				if [ "$remote_branch" = "not_found" ]; then
					echo
					warn "A release branch does not exist. Merging only into the develop branch."
					norelease=true
#					release=false
				else
					if ! git_is_branch_merged_into "$BRANCH" "$remote_branch"; then
						# try to merge into remote release branch
						# in case a previous attempt to finish this hotfix branch has failed,
						# but the merge into the remote release branch was successful, we skip it now
#						local remote_shortname
#						local len=${#remote_tag}
#						remote_shortname=${remote_branch:len}
						local len=${#ORIGIN}
						((len+=1))
						local local_name=${remote_branch:len}
						if [ "$local_branch" = "not_found" ]; then
							git_do branch --track $local_name $remote_branch >/dev/null 2>&1
							git_do checkout "$local_name" >/dev/null 2>&1 || \
							  die "Could not check out $local_name."
							git_do merge --no-ff "$BRANCH" >/dev/null 2>&1 || \
							  die "There were merge conflicts."
							  # TODO: What do we do now?
							git_do push "$ORIGIN" "$local_name" >/dev/null 2>&1 || \
							  die "Could not push to $local_name from $ORIGIN."
							git_do checkout "$BRANCH" >/dev/null 2>&1 || \
							  die "Could not check out $BRANCH."
							git_do branch -d "$local_name" >/dev/null 2>&1
						else
							git_do checkout "$local_name" >/dev/null 2>&1 || \
							  die "Could not check out $local_name."
#							if flag fetch; then
								git_do fetch "$ORIGIN" "$local_name" >/dev/null 2>&1 || \
								  die "Could not fetch $local_name from $ORIGIN."
#							fi
							git_do merge --no-ff "$BRANCH" >/dev/null 2>&1 || \
							  die "There were merge conflicts."
							  # TODO: What do we do now?
							git_do push "$ORIGIN" "$local_name" >/dev/null 2>&1 || \
							  die "Could not push to $local_name from $ORIGIN."
							git_do checkout "$BRANCH" >/dev/null 2>&1 || \
							  die "Could not check out $BRANCH."
							
						fi
					fi
				fi
			fi
		fi

#		if ! flag release; then
			# try to merge into develop
			# in case a previous attempt to finish this hotfix branch has failed,
			# but the merge into develop was successful, we skip it now
			git_do fetch -q "$ORIGIN" "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
			  die "Could not fetch $DEVELOP_BRANCH from $ORIGIN."
			if ! git_is_branch_merged_into "$BRANCH" "$ORIGIN/$DEVELOP_BRANCH"; then
				git_do checkout "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
				  die "Could not check out $DEVELOP_BRANCH."

				# TODO: Actually, accounting for 'git describe' pays, so we should
				# ideally git merge --no-ff $tagname here, instead!
				git_do merge --no-ff "$BRANCH" >/dev/null 2>&1 || \
				  die "There were merge conflicts."
				  # TODO: What do we do now?

				git_do push "$ORIGIN" "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
				  die "Could not push to $DEVELOP_BRANCH from $ORIGIN."
				git_do checkout "$BRANCH" >/dev/null 2>&1 || \
				  die "Could not check out $BRANCH."
			fi
#		fi
	fi

	# try to merge into master
	# in case a previous attempt to finish this hotfix branch has failed,
	# but the merge into master was successful, we skip it now
	if ! git_is_branch_merged_into "$BRANCH" "$MASTER_BRANCH"; then
#		# first, find the tag of the previous version
#		local previoustag
#		previoustag=git_do describe --abbrev=0 --tags
#		git_do checkout "$MASTER_BRANCH" >/dev/null 2>&1 || \
#		  die "Could not check out $MASTER_BRANCH."
#		git_do checkout "$previoustag" >/dev/null 2>&1 || \
#		  die "Could not check out $previoustag."
#		git_do commit --amend -v >/dev/null 2>&1 || \
#		  die "There were merge conflicts."
#		  # TODO: What do we do now?
		git_do merge --no-ff "$MASTER_BRANCH" >/dev/null 2>&1 || \
		  die "There were merge conflicts."
		  # TODO: What do we do now?
		git_do push "$BRANCH":"$ORIGIN/$MASTER_BRANCH" >/dev/null 2>&1 || \
		  die "Could not push to $ORIGIN/$MASTER_BRANCH from $BRANCH."
		git_do checkout "$MASTER_BRANCH" >/dev/null 2>&1 || \
		  die "Could not check out $MASTER_BRANCH."
		git_do fetch -q "$ORIGIN" "$MASTER_BRANCH" >/dev/null 2>&1 || \
		  die "Could not fetch $MASTER_BRANCH from $ORIGIN."
		require_branches_equal "$MASTER_BRANCH" "$ORIGIN/$MASTER_BRANCH"
		git_do checkout "$BRANCH" >/dev/null 2>&1 || \
		  die "Could not check out $BRANCH."
	fi

	if flag push; then
		git_do push "$ORIGIN" "$MASTER_BRANCH" >/dev/null 2>&1 || \
			die "Could not push to $MASTER_BRANCH from $ORIGIN."
		if noflag notag; then
			git_do push --tags "$ORIGIN" >/dev/null 2>&1 || \
				die "Could not push tags to $ORIGIN."
		fi
	fi

	# delete branch
	if noflag keep; then
		git_do checkout "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
		  die "Could not check out $BRANCH."
		git_do branch -d "$BRANCH" >/dev/null 2>&1
		git_do push "$ORIGIN" ":refs/heads/$BRANCH" >/dev/null 2>&1
	fi

	echo
	echo "Summary of actions:"
	echo "- Latest objects have been fetched from '$ORIGIN'"
	echo "- Hotfix branch has been merged into '$MASTER_BRANCH'"
#	if noflag notag; then
		echo "- The hotfix was tagged '$VERSION_PREFIX$VERSION'"
#	fi
#	if flag release; then
	if ! flag onlymaster; then
		if [ "$onlydevelop" != "true" ] && [ "$norelease" != "true" ]; then
			echo "- Hotfix branch has been back-merged into the existing release branch"
		fi
	else
		echo "- Hotfix branch has been back-merged into '$DEVELOP_BRANCH'"
	fi
	if flag keep; then
		echo "- Hotfix branch '$BRANCH' (local and remote) is still available"
	else
		echo "- Hotfix branch '$BRANCH' (local and remote) has been deleted"
	fi
	if flag push; then
		if ! flag onlymaster; then
			echo "- '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'"
		else
			if [ "$norelease" != "true" ]; then
				echo "- '$DEVELOP_BRANCH', the release branch, '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'"
			else
				echo "- '$DEVELOP_BRANCH', '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'"
			fi
		fi
	fi
	if noflag keep; then
		echo "- You are now on branch '$DEVELOP_BRANCH'"
	fi
	echo
}

cmd_delete() {
	DEFINE_boolean local false "only delete the local branch" l
	parse_args "$@"

	# sanity checks
#	require_branch "$BRANCH"

	# change to branch develop
	git_do checkout "$DEVELOP_BRANCH" >/dev/null 2>&1 || \
	  die "Could not check out $DEVELOP_BRANCH."

	# delete local branch
	git_do branch -d "$BRANCH" >/dev/null 2>&1

	if ! flag local; then
		# delete remote branch
		git_do push "$ORIGIN" ":refs/heads/$BRANCH" >/dev/null 2>&1
	fi

	echo
	echo "Summary of actions:"
	echo "- The local branch '$BRANCH' has been deleted"
	if ! flag local; then
		echo "- The remote branch '$ORIGIN/$BRANCH' has been deleted"
	fi
	echo "- You are now on branch '$DEVELOP_BRANCH'"
	echo
}
